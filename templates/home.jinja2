{% extends "base.jinja2" %}

{% block title %}VH7 Beta{% endblock %}

{% block content %}
<div id="app">
    <section class="hero is-primary is-medium is-bold">
        <div class="hero-head">
            {% include "nav.jinja2" %}
        </div>
        <div class="hero-body">
            <div class="container">
                <h1 class="title">
                    VH7 <span class="tag is-warning">Beta</span>
                </h1>
                <h2 class="subtitle">
                    A free and open source <u>URL shortening</u>, <u>file sharing</u> and <u>pastebin</u> service.
                </h2>
            </div>
        </div>
        <div class="hero-foot">
            <nav class="tabs is-boxed is-fullwidth">
                <div class="container">
                    <ul>
                        <li v-bind:class="[tab == 'shorten' ? 'is-active' : '']" @click="tab = 'shorten'">
                            <a>Shorten</a>
                        </li>
                        <li v-bind:class="[tab == 'paste' ? 'is-active' : '']" @click="tab = 'paste'">
                            <a>Paste</a>
                        </li>
                        <li v-bind:class="[tab == 'upload' ? 'is-active': '']" @click="tab = 'upload'">
                            <a>Upload</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </section>

    <section id="feedback-section" class="section" v-if="uploadProgress < 100 || result">
        <div class="container">
            <div class="notification" v-if="uploadProgress < 100">
                Your file is being uploaded (<% uploadProgress.toFixed(0) %>%)...

                <div style="padding-top: 1em">
                    <progress class="progress is-primary" :value="uploadProgress" max="100"><% uploadProgress %>%</progress>
                </div>
            </div>

            <div class="notification is-success" v-if="result">
                <button class="delete" v-on:click="result = null"></button>
                <p>Shortened to:<br>
                <span class="is-size-4"><code><% shortlink %></code></span></p>
                <p v-if="result.expires" class="is-italic is-size-7">This file will last until <% result.expires | moment("HH:mm ddd Do MMM YYYY") %>.</p>
            </div>
        </div>
    </section>

    <section id="error-section" class="section" v-if="error">
        <div class="container">
            <div class="notification is-danger">
                <button class="delete" v-on:click="error = null"></button>
                <span v-html="error"></span>
            </div>
        </div>
    </section>

    <section id="shorten-section" class="section" v-if="tab == 'shorten'">
        <div class="container">
            <h1 class="title">Shorten</h1>

            <form @submit.prevent="handleShorten">
                <div class="field">
                    <label class="label">URL</label>
                    <div class="control has-icons-left">
                        <input class="input" type="url" v-model="shortenForm.url">
                        <span class="icon is-small is-left">
                            <i class="fas fa-link"></i>
                        </span>
                    </div>
                </div>
                <div class="field">
                    <div class="control">
                        <button type="submit" class="button is-primary" :disabled="disableSubmit">Shorten</button>
                    </div>
                </div>
            </form>
        </div>
    </section>

    <section id="paste-section" class="section" v-if="tab == 'paste'">
        <div class="container">
            <h1 class="title">Paste</h1>

            <div class="notification is-warning">
                <b>VH7 is currently in beta!</b> At the moment we only support plain
                text code pastes, this means that your code will not be syntax
                highlighted now or after the beta.
            </div>

            <form @submit.prevent="handlePaste">
                <div class="field">
                    <label class="label">Code</label>
                    <div class="control">
                        <textarea class="textarea" v-model="pasteForm.code" style="font-family: monospace;" rows="30"></textarea>
                    </div>
                </div>
                <div class="field">
                    <label class="label">Language</label>
                    <div class="control has-icons-left">
                        <div class="select">
                            <select v-model="pasteForm.language">
                                <option value="plain" selected="selected">Plain Text</option>
                            </select>
                        </div>
                        <div class="icon is-small is-left">
                            <i class="fas fa-code"></i>
                        </div>
                    </div>
                </div>
                <div class="field">
                    <div class="control">
                        <button type="submit" class="button is-primary" :disabled="disableSubmit">Paste</button>
                    </div>
                </div>
            </form>
        </div>
    </section>

    <section id="upload-section" class="section" v-if="tab == 'upload'">
        <div class="container">
            <h1 class="title">Upload</h1>

            <div class="notification is-warning">
                <b>VH7 is currently in beta!</b> Although file uploads are supported
                at the moment, we can't guarentee that the files will be stored after
                the beta.
            </div>

            <div class="notification is-info">
                Uploaded files will last between {{ config["UPLOAD_MIN_AGE"] }} to {{ config["UPLOAD_MAX_AGE"] }} days depending on their size.
                The maximum size for uploads is {{ config["UPLOAD_MAX_SIZE"] }} Mb.
            </div>

            <form @submit.prevent="handleUpload">
                <div class="field">
                    <label class="label">File</label>
                    <div class="control">
                        <div id="upload-file" class="file has-name">
                            <label class="file-label">
                                <input class="file-input" type="file" ref="file" v-on:change="handleFileUpload()">
                                <span class="file-cta">
                                    <span class="file-icon">
                                        <i class="fas fa-upload"></i>
                                    </span>
                                    <span class="file-label">
                                        Choose a fileâ€¦
                                    </span>
                                </span>
                                <span class="file-name">
                                    <span v-if="!uploadForm.file">No file uploaded</span>
                                    <span v-else><% uploadForm.file.name %></span>
                                </span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="field">
                    <div class="control">
                        <button type="submit" class="button is-primary" :disabled="disableSubmit">Upload</button>
                    </div>
                </div>
            </form>
        </div>
    </section>
</div>
{% endblock %}

{% block footer %}
    {{ super() }}
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdn.statically.io/gh/vuelidate/vuelidate/5de65cdd/dist/vuelidate.min.js"></script>
    <script src="https://cdn.statically.io/gh/vuelidate/vuelidate/5de65cdd/dist/validators.min.js"></script>
    <script src="https://cdn.statically.io/gh/brockpetrie/vue-moment/0f81113a/dist/vue-moment.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
        Vue.use(window.vuelidate.default);
        Vue.use(window.vueMoment.default);

        var app = new Vue({
            el: '#app',
            delimiters: ["<%", "%>"],
            data: {
                tab: 'shorten',
                shortenForm: {
                    url: ""
                },
                pasteForm: {
                    code: "",
                    language: "plain"
                },
                uploadForm: {
                    file: null
                },
                uploadProgress: 100,
                result: null,
                error: null
            },
            computed: {
                disableSubmit() {
                    return this.uploadProgress < 100;
                },
                shortlink() {
                    if (!this.result) {
                        return null;
                    }

                    return window.location.origin + this.result.short_link.link;
                }
            },
            methods: {
                clearForms() {
                    this.shortenForm.url = "";
                    this.pasteForm.code = "";
                    this.pasteForm.language = "plain";
                    this.uploadForm.file = null;

                    if (this.$refs.file) {
                        this.$refs.file.value = "";
                    }
                },
                handleResponse(response) {
                    if (response.status != 200) {
                        this.handleError("Status code is not 200!");
                    }

                    this.result = response.data;

                    this.clearForms();
                },
                handleError(error) {
                    if (error.response) {
                        // Error after sending (from server)
                        let e = error.response.data;
                        if (typeof e != "object" || e === null) {
                            console.log("The server's error is not in JSON format.");
                            this.error = "An unknown error occurred whilst performing the action. Please check the console for more details.";
                            console.error(error.response.data);
                            return;
                        }

                        if (e.errors) {
                            var errorList = null;
                            if (Array.isArray(e.errors)) {
                                errorList = e.errors;
                            } else {
                                // Flatten error object's values into a single array
                                errorList = [].concat.apply([], Object.values(e.errors));
                            }

                            this.error = "The following errors have occurred whilst perfoming the action:<ul><li>" + errorList.join("</li><li>") + "</li></ul>";
                        } else {
                            console.log("The server's is not in an expected JSON format.");
                            this.error = "An unknown error occurred whilst performing the action. Please check the console for more details.";
                            console.error(error.response.data);
                            return;
                        }
                    } else if (error.request) {
                        // Error before sending
                        this.error = "An unknown error occurred whilst performing the action. Please check the console for more details.";
                        console.log(error.request);
                    } else {
                        // Unknown
                        this.error = "An unknown error occurred whilst performing the action. Please check the console for more details.";
                        console.log(error.message);
                    }
                },
                handleShorten() {
                    console.log("Shortening URL " + this.shortenForm.url + "...");

                    axios.post("/api/shorten", {
                        url: this.shortenForm.url
                    }).then(this.handleResponse).catch(this.handleError);
                },
                handlePaste() {
                    console.log("Creating paste...");

                    axios.post("/api/paste", {
                        code: this.pasteForm.code,
                        language: this.pasteForm.language
                    }).then(this.handleResponse).catch(this.handleError);
                },
                handleUpload() {
                    console.log("Uploading file...");

                    this.uploadProgress = 0;

                    let formData = new FormData();
                    formData.append("file", this.uploadForm.file);

                    axios.post("/api/upload", formData, {
                        headers: {
                            "Content-Type": "multipart/form-data"
                        },
                        onUploadProgress: this.onUploadProgress
                    }).then(this.handleResponse).catch(this.handleError);
                },
                handleFileUpload() {
                    if (this.$refs.file.files.length > 0) {
                        this.uploadForm.file = this.$refs.file.files[0];
                    }
                },
                onUploadProgress(progressEvent) {
                    this.uploadProgress = (progressEvent.loaded / progressEvent.total) * 100;
                }
            },
            watch: {
                tab: function(val) {
                    window.location.hash = val;
                }
            },
            mounted() {
                var hash = window.location.hash.substring(1);
                this.tab = hash == "shorten" || hash == "paste" || hash == "upload" ? hash : "shorten";
            }
        });
    </script>
{% endblock %}